!<arch>
0-isupper.c/    0           0     0     644     198       `
#include "main.h"

/**
 * _isupper - evalue if letter is uppercase
 * @c: print int
 *
 * Return: Always 0
 */
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
{
return (0);
}
}
0-memset.c/     0           0     0     644     326       `
#include "main.h"

/**
 * *_memset - fills memory with a constant bytes
 *@s: pointers block of memory to fills
 *@b: value to set
 *@n: bytes of the memory
 *
 * Return: dest
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;

for (i = 0; i < n; i++)
{
*(s + i) = b; /*add 1 position s*/
}

return (s);

}

0-strcat.c/     0           0     0     644     358       `
#include "main.h"

/**
 * *_strcat - concatenates two strings
 *@dest: A pointer to a character that will be changed
 *@src: A pointer to a character that will be changed
 *
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
int i;
int j;

i = 0;
while (dest[i] != '\0')
i++;

for (j = 0; src[j] != '\0'; j++)
dest[i + j] = src[j];

return (dest);
}
100-atoi.c/     0           0     0     644     554       `
#include "main.h"

/**
 * is_numerical - check if it is a digit
 * @n: number
 * Return: if it is a number, return 1 else return 0
 */
int is_numerical(unsigned int n)
{
return (n >= '0' && n <= '9');
}

/**
 * _atoi - convert a string to an integer
 * @s: string
 *
 * Return: Return the num
 */
int _atoi(char *s)
{
unsigned int num, i;
int sign;

sign = 1;
num = 0;

for (i = 0; s[i] != '\0'; i++)
{
if (is_numerical(s[i]))
{
num = (s[i] - 48) + num * 10;

if (s[i + 1] == ' ')
break;
}
else if (s[i] == '-')
{
sign *= -1;
}
}

return (num *sign);
}

1-isdigit.c/    0           0     0     644     180       `
#include "main.h"

/**
 * _isdigit - if is a digit
 * @c: print int
 *
 * Return: Always 0
 */
int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
else
{
return (0);
}
}
1-memcpy.c/     0           0     0     644     349       `
#include "main.h"

/**
 * *_memcpy - copy number bytes form address "from" address "to"
 *@dest: content is to be copied
 *@src: source of data to be copied
 *@n: bytes of the memory
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;

i = 0;
while (i < n)
{
*(dest + i) = *(src + i);
i++;
}
return (dest);

}

1-strncat.c/    0           0     0     644     402       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * @dest: A pointer to the character thatw will changed
 * @src: A pointer to the character that will be changed
 * @n: value
 *
 * Return: @dest
 */
char *_strncat(char *dest, char *src, int n)
{
int i, j;

i = 0;
while (dest[i])
i++;

for (j = 0; j < n && src[j] != '\0'; j++)

dest[i + j] = src[j];
dest[i + j] = '\0';

return (dest);
}
2-strchr.c/     0           0     0     644     321       `
#include "main.h"

/**
 * *_strchr - locates a character in a string
 *@s: string
 *@c: character to search
 * Return: pointer to the first occurence of the character c in the strings
 */
char *_strchr(char *s, char c)
{
while (*s != '\0')
{
if (*s == c)
{
return (s);
}
++s;
}
if (*s == c)
{
return (s);
}
return (0);
}

2-strlen.c/     0           0     0     644     209       `
#include "main.h"

/**
 * _strlen - Length of a string
 * @s: A pointer to an int that will be changed
 *
 * Return: void
 */
int _strlen(char *s)
{
int u;

u = 0;
while (s[u] != '\0')
{
u++;
}

return (u);
}

2-strncpy.c/    0           0     0     644     377       `
#include "main.h"

/**
 * _strncpy - copy a string
 * @dest: A pointer to a character that will be changed
 * @src: A pointer to a character that will be changed
 * @n: value
 *
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
int i;

i = 0;
while (i < n && src[i] != '\0')
{
dest[i] = src[i];
i++;
}

while (i < n)
{
dest[i] = '\0';
i++;
}

return (dest);
}

3-islower.c/    0           0     0     644     252       `
#include "main.h"

/**
 * _islower - check if a charcter is lowercase
 * @c: The character to be checked
 *
 * Return: 1 if character is lowercase, 0 otherwise.
 */
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else
{
return (0);
}
}
3-puts.c/       0           0     0     644     235       `
#include "main.h"

/**
 * _puts - print a string
 * @str: A pointer to an int that will be printed
 *
 * Return: void
 */
void _puts(char *str)
{
char *c;
int m;

c = str;

for (m = 0; c[m]; m++)
{
_putchar (c[m]);
}
_putchar('\n');
}

3-strcmp.c/     0           0     0     644     281       `
#include "main.h"

/**
 * _strcmp - A function to compare two strings
 * @s1: string 1
 * @s2: string 2
 *
 * Return: string
 */
int _strcmp(char *s1, char *s2)
{
int i = 0, cmp = 0;

while (s1[i] != '\0' && s2[i] != '\0' && cmp == 0)
{
cmp = s1[i] - s2[i];
i++;
}
return (cmp);
}

3-strspn.c/     0           0     0     644     515       `
#include "main.h"

/**
 * _strspn - Locates a character in a string
 * @s: This is the main C string to be scanned
 * @accept: This is the string containing the list of characters to match in s
 * Return: return count
 */
unsigned int _strspn(char *s, char *accept)
{
int i, j;
int count = 0;
char *str1, *str2;

str1 = s;
str2 = accept;

i = 0;
while (str1[i] != '\0')
{
j = 0;
while (str2[j] != '\0')
{
if (str2[j] == str1[i])
{
count++;
break;
}
j++;
}
if (s[i] != accept[j])
{
break;
}
i++;
}
return (count);
}

4-isalpha.c/    0           0     0     644     250       `
#include "main.h"

/**
 * _isalpha - Returns 1 if c is a letter, lowercase or uppercase
 * @c: int to print
 *
 * Return: Always 0
 */
int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') ||
(c >= 'A' && c <= 'Z'))
{
return (1);
}
else
{
return (0);
}
}
4-strpbrk.c/    0           0     0     644     425       `
#include "main.h"

/**
 * *_strpbrk - matches any character specified
 * @s: This is the C string to be scanned.
 * @accept:character in str1 that matches one of the characters in str2
 * Return: string s that matches any character specified in accept
 */
char *_strpbrk(char *s, char *accept)
{
int j;

while (*s != '\0')
{
j = 0;
while (accept[j] != '\0')
{
if (*s == accept[j])
{
return (s);
}
j++;
}
s++;
}
return (0);
}

5-strstr.c/     0           0     0     644     483       `
#include "main.h"

/**
 * *_strstr - first occurrence of the substring needle in the string haystack
 * @haystack: main str to be examined
 * @needle: searched in haystack
 * Return: return 0
 */
char *_strstr(char *haystack, char *needle)
{
char *str1, *str2;

while (*haystack != '\0')
{
str1 = haystack;
str2 = needle;

while (*haystack != '\0' && *str2 != '\0' && *haystack == *str2)
{
haystack++;
str2++;
}
if (*str2 == '\0')
return (str1);
haystack = str1 + 1;
}
return (0);
}

6-abs.c/        0           0     0     644     229       `
#include "main.h"
#include <stdio.h>

/**
 *  _abs - Absolute value
 *  @n: The int to print
 *
 *  Return: Always 0
 */
int _abs(int n)
{
if (n < 0)
{
return (n * (-1));
}
else if (n == 0)
{
return (0);
}
else
{
return (n);
}
}

9-strcpy.c/     0           0     0     644     333       `
#include "main.h"

/**
 * *_strcpy -  copies the string pointed to by src
 * @dest: A pointer to a char that will be changed
 * @src: A pointer to a char that will be changed
 *
 * Return: void
 */
char *_strcpy(char *dest, char *src)
{
int i = 0;

while (src[i] != '\0')
{
dest[i] = src[i];
i++;
}
dest[i] = '\0';

return (dest);
}

_putchar.c/     0           0     0     644     240       `
#include <unistd.h>

/**
 * _putchar - write the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1
 * On error, -1 is returned, and error is there returned
 */
int _putchar(char c)
{
return (write(1, &c, 1));
}
